# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spectrum')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spectrum')
    _spectrum = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spectrum', [dirname(__file__)])
        except ImportError:
            import _spectrum
            return _spectrum
        try:
            _mod = imp.load_module('_spectrum', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spectrum = swig_import_helper()
    del swig_import_helper
else:
    import _spectrum
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SP_LEFT_CHANNEL = _spectrum.SP_LEFT_CHANNEL
SP_RIGHT_CHANNEL = _spectrum.SP_RIGHT_CHANNEL
SP_BYPASS = _spectrum.SP_BYPASS
SP_TYPE_CHANGE = _spectrum.SP_TYPE_CHANGE
SP_WINDOW = _spectrum.SP_WINDOW
SP_RMS_PEAK = _spectrum.SP_RMS_PEAK
SP_SPECTRUM_MAX_FREQ = _spectrum.SP_SPECTRUM_MAX_FREQ
SP_AVERAGES_MAX_FREQ = _spectrum.SP_AVERAGES_MAX_FREQ
SP_FREQ_STEP_SIZE = _spectrum.SP_FREQ_STEP_SIZE

def spectrum_alloc(samplerate, calibrationConstant, FFTBuffer):
    return _spectrum.spectrum_alloc(samplerate, calibrationConstant, FFTBuffer)
spectrum_alloc = _spectrum.spectrum_alloc

def spectrum_free():
    return _spectrum.spectrum_free()
spectrum_free = _spectrum.spectrum_free

def spectrum_process(audio):
    return _spectrum.spectrum_process(audio)
spectrum_process = _spectrum.spectrum_process

def spectrum_getSpectrum(spectrum):
    return _spectrum.spectrum_getSpectrum(spectrum)
spectrum_getSpectrum = _spectrum.spectrum_getSpectrum

def spectrum_setValue(param, value):
    return _spectrum.spectrum_setValue(param, value)
spectrum_setValue = _spectrum.spectrum_setValue

def spectrum_getValue(param):
    return _spectrum.spectrum_getValue(param)
spectrum_getValue = _spectrum.spectrum_getValue

def spectrum_getFilters(filterValues):
    return _spectrum.spectrum_getFilters(filterValues)
spectrum_getFilters = _spectrum.spectrum_getFilters

def spectrum_getThirdOctaveBandSpectrum(thirdOctaveBandSpectrum):
    return _spectrum.spectrum_getThirdOctaveBandSpectrum(thirdOctaveBandSpectrum)
spectrum_getThirdOctaveBandSpectrum = _spectrum.spectrum_getThirdOctaveBandSpectrum
class kiss_fft_cpx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kiss_fft_cpx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kiss_fft_cpx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _spectrum.kiss_fft_cpx_r_set
    __swig_getmethods__["r"] = _spectrum.kiss_fft_cpx_r_get
    if _newclass:
        r = _swig_property(_spectrum.kiss_fft_cpx_r_get, _spectrum.kiss_fft_cpx_r_set)
    __swig_setmethods__["i"] = _spectrum.kiss_fft_cpx_i_set
    __swig_getmethods__["i"] = _spectrum.kiss_fft_cpx_i_get
    if _newclass:
        i = _swig_property(_spectrum.kiss_fft_cpx_i_get, _spectrum.kiss_fft_cpx_i_set)

    def __init__(self):
        this = _spectrum.new_kiss_fft_cpx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spectrum.delete_kiss_fft_cpx
    __del__ = lambda self: None
kiss_fft_cpx_swigregister = _spectrum.kiss_fft_cpx_swigregister
kiss_fft_cpx_swigregister(kiss_fft_cpx)


def kiss_fft_alloc(nfft, inverse_fft, mem, lenmem):
    return _spectrum.kiss_fft_alloc(nfft, inverse_fft, mem, lenmem)
kiss_fft_alloc = _spectrum.kiss_fft_alloc

def kiss_fft(cfg, fin, fout):
    return _spectrum.kiss_fft(cfg, fin, fout)
kiss_fft = _spectrum.kiss_fft

def kiss_fft_stride(cfg, fin, fout, fin_stride):
    return _spectrum.kiss_fft_stride(cfg, fin, fout, fin_stride)
kiss_fft_stride = _spectrum.kiss_fft_stride

def kiss_fft_cleanup():
    return _spectrum.kiss_fft_cleanup()
kiss_fft_cleanup = _spectrum.kiss_fft_cleanup

def kiss_fft_next_fast_size(n):
    return _spectrum.kiss_fft_next_fast_size(n)
kiss_fft_next_fast_size = _spectrum.kiss_fft_next_fast_size

def kiss_fftr_alloc(nfft, inverse_fft, mem, lenmem):
    return _spectrum.kiss_fftr_alloc(nfft, inverse_fft, mem, lenmem)
kiss_fftr_alloc = _spectrum.kiss_fftr_alloc

def kiss_fftr(cfg, timedata, freqdata):
    return _spectrum.kiss_fftr(cfg, timedata, freqdata)
kiss_fftr = _spectrum.kiss_fftr

def kiss_fftri(cfg, freqdata, timedata):
    return _spectrum.kiss_fftri(cfg, freqdata, timedata)
kiss_fftri = _spectrum.kiss_fftri
# This file is compatible with both classic and new-style classes.


